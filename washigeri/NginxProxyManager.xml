<?xml version="1.0" encoding="UTF-8"?>
<Containers>
    <Name>NginxProxyManager</Name>
    <Repository>jc21/nginx-proxy-manager</Repository>
    <Registry>https://hub.docker.com/r/jc21/nginx-proxy-manager/</Registry><!-- <Network>bridge</Network> -->
    <Privileged>false</Privileged>
    <Project>https://github.com/jc21/nginx-proxy-manager</Project>
    <Support>https://github.com/jc21/nginx-proxy-manager/issues</Support>
    <Network>bridge</Network>
    <Overwiew>
    This project comes as a pre-built docker image that enables you to easily forward to your websites running at home or otherwise, including free SSL, without having to know too much about Nginx or Letsencrypt.

    Project Goal
    I created this project to fill a personal need to provide users with a easy way to accomplish reverse proxying hosts with SSL termination and it had to be so easy that a monkey could do it. This goal hasn't changed. While there might be advanced options they are optional and the project should be as simple as possible so that the barrier for entry here is low.

    Features
    Beautiful and Secure Admin Interface based on Tabler
    Easily create forwarding domains, redirections, streams and 404 hosts without knowing anything about Nginx
    Free SSL using Let's Encrypt or provide your own custom SSL certificates
    Access Lists and basic HTTP Authentication for your hosts
    Advanced Nginx configuration available for super users
    User management, permissions and audit log
    </Overwiew>
    <Category>Network:Web Network:Proxy Tools:</Category>
    <WebUI>http://[IP]:[PORT:81]</WebUI>
    <Description>
    Custom nginx
  </Description>
    <Icon>https://raw.githubusercontent.com/jlesage/docker-templates/master/jlesage/images/nginx-proxy-manager-icon.png</Icon>
    <Beta>False</Beta>
    <Date>2019-05-04</Date><!-- <Changes></Changes>
    <Networking>
        <Mode>bridge</Mode>
        <Publish>
            <Port>
                <HostPort>8080</HostPort>
                <ContainerPort>80</ContainerPort>
                <Protocol>tcp</Protocol>
            </Port>
            <Port>
                <HostPort>80443</HostPort>
                <ContainerPort>443</ContainerPort>
                <Protocol>tcp</Protocol>
            </Port>
            <Port>
                <HostPort>8081</HostPort>
                <ContainerPort>81</ContainerPort>
                <Protocol>tcp</Protocol>
            </Port>
        </Publish>
    </Networking>
    <Data>
        <Volume>
            <HostDir>/mnt/user/appdata/NginxProxyManager/data</HostDir>
            <ContainerDir>/data</ContainerDir>
            <Mode>rw</Mode>
        </Volume>
        <Volume>
            <HostDir>/mnt/user/appdata/NginxProxyManager/letsencrypt</HostDir>
            <ContainerDir>/etc/letsencrypt</ContainerDir>
            <Mode>rw</Mode>
        </Volume>
        <Volume>
            <HostDir>/mnt/user/appdata/NginxProxyManager/config</HostDir>
            <ContainerDir>/app/config</ContainerDir>
            <Mode>rw</Mode>
        </Volume>
    </Data>Volume Mappings -->
    <Config Name="Config Directory" Target="/data" Default="/mnt/user/appdata/nginx-proxy-manager/data" Mode="rw" Description="This is where the application stores its configuration, log and any files needing persistency.Container path: /data" Type="Path" Display="advanced-hide" Required="true" Mask="false"/>
    <Config Name="Let's Encrypt Directory" Target="/etc/letsencrypt" Default="/mnt/user/appdata/NginxProxyManager/letsencrypt" Mode="rw" Description="This is where the application stores Let's Encrypt information.Container path: /etc/letsencrypt" Type="Path" Display="advanced-hide" Required="true" Mask="false"/>
    <Config Name="Config Directory" Target="/app/config" Default="/mnt/user/appdata/nginx-proxy-manager/config" Mode="rw" Description="This is where the application stores its configuration JSON file.Container path: /app/config" Type="Path" Display="advanced-hide" Required="true" Mask="false"/><!-- Port Mappings -->
    <Config Name="Web UI Port" Target="81" Default="8081" Mode="tcp" Description="Port used to access the web interface of the application." Type="Port" Display="always" Required="true" Mask="false"/>
    <Config Name="HTTP Port" Target="80" Default="80443" Mode="tcp" Description="Port used to serve HTTP requests." Type="Port" Display="always" Required="true" Mask="false"/>
    <Config Name="HTTPs Port" Target="80" Default="8080" Mode="tcp" Description="Port used to serve HTTPs requests." Type="Port" Display="always" Required="true" Mask="false"/>
</Containers>